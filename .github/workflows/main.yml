name: Build ALL
run-name: Build ALL
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  # Build_Android:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         channel: "stable"
  #         flutter-version-file: pubspec.yaml
  #         architecture: x64
  #     - name: Decode and install certificate
  #       env:
  #         STORE_FILE: ${{ secrets.ANDROID_KEYSTORE }}
  #         PROPERTY_FILE: ${{ secrets.ANDROID_KEY_PROPERTIES }}
  #       run: |
  #           echo "$STORE_FILE" | base64 --decode > android/keystore.jks
  #           echo "$PROPERTY_FILE" > android/key.properties
  #     - uses: actions/setup-java@v4
  #       with:
  #         distribution: 'oracle'
  #         java-version: '17'
  #     - name: Check rust-toolchain.toml
  #       run: rustup show
  #     - run: flutter pub get
  #     - run: flutter build apk --release
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: apks
  #         path: build/app/outputs/apk/release/*-arm64-v8a.apk
  # Build_Windows:
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: install dependencies
  #       run: | 
  #         choco install yq -y
  #         pip install httpx
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         channel: "stable"
  #         flutter-version-file: pubspec.yaml
  #         architecture: x64
  #     - name: build
  #       run: |
  #         flutter pub get
  #         python windows/build.py
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: windows_build
  #         path: build/windows/Venera-*
  Release:
    runs-on: ubuntu-22.04
    # needs: [Build_Android, Build_Windows]
    steps:
      # - uses: actions/download-artifact@v4
      #   with:
      #     name: apks
      #     path: outputs
  
      # - uses: actions/download-artifact@v4
      #   with:
      #     name: windows_build
      #     path: outputs
      # 获取最近的 tag
      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=${{ github.ref_name }}
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"
  
      # 根据事件类型计算新 tag
      - name: Compute new tag
        id: compute_tag
        run: |
          version="${LATEST_TAG#v}"
          if [[ "$version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?(-pre)?$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            pre=${BASH_REMATCH[5]}
  
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              # push: pre-release
              if [[ -z "$pre" ]]; then
                patch=$((patch + 1))
                new_tag="v${major}.${minor}.${patch}.0-pre"
              else
                pre=$((pre + 1))
                new_tag="v${major}.${minor}.${patch}.${pre}-pre"
              fi
              echo "PRERELEASE=true" >> $GITHUB_ENV
            elif [[ "${{ github.event_name }}" == "push" ]]; then
              # workflow_dispatch: 正式 release
              if [[ -n "$pre" ]]; then
                # 如果当前是 pre-release，则去掉 pre 部分
                new_tag="v${major}.${minor}.${patch}"
              else
                # 否则正常递增 patch
                patch=$((patch + 1))
                new_tag="v${major}.${minor}.${patch}"
              fi
              echo "PRERELEASE=false" >> $GITHUB_ENV
            fi
  
            echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
            echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
            echo "Calculated new tag: $new_tag"
          else
            echo "Invalid tag format: $version"
            exit 1
          fi
  
      # 创建 Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: ${{ env.PRERELEASE == 'true' }}
          generate_release_notes: true
          files: |
            outputs/*.apk
            outputs/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
