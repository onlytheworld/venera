name: Build ALL
run-name: Build ALL
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs: 
  Build_Android:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml
          architecture: x64
      - name: Decode and install certificate
        env:
          STORE_FILE: ${{ secrets.ANDROID_KEYSTORE }}
          PROPERTY_FILE: ${{ secrets.ANDROID_KEY_PROPERTIES }}
        run: |
            echo "$STORE_FILE" | base64 --decode > android/keystore.jks
            echo "$PROPERTY_FILE" > android/key.properties
      - uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'
      - name: Check rust-toolchain.toml
        run: rustup show
      - run: flutter pub get
      - run: flutter build apk --release
      - uses: actions/upload-artifact@v4
        with:
          name: apks
          path: build/app/outputs/apk/release/*-arm64-v8a.apk
  Build_Windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: install dependencies
        run: | 
          choco install yq -y
          pip install httpx
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml
          architecture: x64
      - name: build
        run: |
          flutter pub get
          python windows/build.py
      - uses: actions/upload-artifact@v4
        with:
          name: windows_build
          path: build/windows/Venera-*
  Release:
    runs-on: ubuntu-22.04
    needs: [Build_Android, Build_Windows]
    steps:
      - name: Get latest tag via API
        id: get_tag
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/venera-app/venera/tags \
            | jq -r '.[0].name')
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"
      # 创建 Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.LATEST_TAG }}
          prerelease: ${{ env.PRERELEASE == 'true' }}
          generate_release_notes: true
          files: |
            outputs/*.apk
            outputs/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
