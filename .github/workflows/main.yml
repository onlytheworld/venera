name: Build ALL
run-name: Build ALL
on:
  workflow_dispatch: {}
  release:
    types: [published]

jobs:
  Build_Android:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml
          architecture: x64
      - name: Decode and install certificate
        env:
          STORE_FILE: ${{ secrets.ANDROID_KEYSTORE }}
          PROPERTY_FILE: ${{ secrets.ANDROID_KEY_PROPERTIES }}
        run: |
            echo "$STORE_FILE" | base64 --decode > android/keystore.jks
            echo "$PROPERTY_FILE" > android/key.properties
      - uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'
      - name: Check rust-toolchain.toml
        run: rustup show
      - run: flutter pub get
      - run: flutter build apk --release
      - uses: actions/upload-artifact@v4
        with:
          name: apks
          path: build/app/outputs/apk/release
  Build_Windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: install dependencies
        run: | 
          choco install yq -y
          pip install httpx
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml
          architecture: x64
      - name: build
        run: |
          flutter pub get
          python windows/build.py
      - uses: actions/upload-artifact@v4
        with:
          name: windows_build
          path: build/windows/Venera-*
  Release:
    runs-on: ubuntu-22.04
    needs: [Build_Android, Build_Windows]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: apks
          path: outputs
      - uses: actions/download-artifact@v4
        with:
          name: windows_build
          path: outputs
      # 获取最近的 tag
      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"
      # 拼接一个新的 pre-release tag，比如 v1.0.0 → v1.0.1-pre
      - name: Compute pre-release tag
        id: compute_tag
        run: |
          base=${LATEST_TAG#v}  # 去掉 v 前缀
          IFS='.' read -r major minor patch <<< "$base"
          patch=$((patch + 1))
          new_tag="v${major}.${minor}.${patch}-pre"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
      # 创建新的 prerelease
      - name: Create pre-release (manual trigger only)
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: true
          generate_release_notes: true
          files: |
            outputs/*.apk
            outputs/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
          
      - name: Upload release artifacts (published tag)
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            outputs/*.apk
            outputs/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
